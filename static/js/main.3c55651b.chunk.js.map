{"version":3,"sources":["parkingSpace.js","App.js","serviceWorker.js","index.js"],"names":["ParkingSpace","Fragment","className","this","props","parkingSpace","entrance","exit","id","type","placeholder","typt","readOnly","defaultValue","toLocaleString","timeSpent","value","onClick","onStartTime","onFinishTime","onResetTime","onDelete","Component","App","state","totalparkingSpace","parkingSpaceAvalilable","parkingSpaceAccupied","plate","parkingSpaceList","hourCost","overTime","overtimeCost","createParkingSpace","newParkingSpace","newParkingSpaceList","setState","updateCounters","deleteAllParkingSpace","startTime","position","Date","finishTime","dateStart","dateFinish","milliseconds","Math","abs","hours","floor","minutes","seconds","toFixed","deleteParkingSpace","filter","item","index","resetTime","total","available","occupied","updateHourCost","newCost","updateOverTime","newOverTimet","console","log","updateOverTimeCost","newOverTimeCost","hourCovertimeCostost","onChange","e","target","map","key","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3c55651b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./parkingSpace.css\";\r\n\r\nclass ParkingSpace extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div\r\n          className={\r\n            this.props.parkingSpace.entrance\r\n              ? this.props.parkingSpace.exit\r\n                ? \"parkingspace finalizing\"\r\n                : \"parkingspace occupied\"\r\n              : \"parkingspace\"\r\n          }\r\n        >\r\n          <div className=\"topcontainer\">\r\n            <div className=\"parkingPosition\">\r\n              <span>{this.props.id + 1} </span>\r\n            </div>\r\n            <div className=\"inputbox\">\r\n              <div className=\"line\">\r\n                <label>\r\n                  <span>Placa</span>\r\n                  <input type=\"text\" placeholder=\"AAAA-9999\" />\r\n                </label>\r\n              </div>\r\n              <div className=\"line\">\r\n                <label>\r\n                  <span>Entrada</span>\r\n                  <input\r\n                    className=\"inputreadonly\"\r\n                    typt=\"text\"\r\n                    readOnly\r\n                    defaultValue={this.props.parkingSpace.entrance.toLocaleString()}\r\n                  />\r\n                </label>\r\n              </div>\r\n              <div className=\"line\">\r\n                <label>\r\n                  <span>Sa√≠da</span>\r\n                  <input\r\n                    className=\"inputreadonly\"\r\n                    typt=\"text\"\r\n                    readOnly\r\n                    defaultValue={this.props.parkingSpace.exit.toLocaleString()}\r\n                  />\r\n                </label>\r\n              </div>\r\n              <div className=\"line\">\r\n                <label>\r\n                  <span>Tempo</span>\r\n                  <input\r\n                    className=\"inputreadonly\"\r\n                    typt=\"text\"\r\n                    readOnly\r\n                    defaultValue={this.props.parkingSpace.timeSpent}\r\n                  />\r\n                </label>\r\n              </div>\r\n              <div className=\"line\">\r\n                <label>\r\n                  <span>Valor</span>\r\n                  <input\r\n                    className=\"inputreadonly\"\r\n                    typt=\"text\"\r\n                    defaultValue={this.props.parkingSpace.value}\r\n                    readOnly\r\n                  />\r\n                </label>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"bottoncontainer\">\r\n            <button onClick={() => this.props.onStartTime(this.props.id)}>\r\n              Iniciar\r\n            </button>\r\n            <button onClick={() => this.props.onFinishTime(this.props.id)}>\r\n              Finalizar\r\n            </button>\r\n            <button onClick={() => this.props.onResetTime(this.props.id)}>\r\n              Reiniciar\r\n            </button>\r\n            <button\r\n              className=\"deletebutton\"\r\n              onClick={() => this.props.onDelete(this.props.id)}\r\n            >\r\n              Deletar\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ParkingSpace;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport ParkingSpace from \"./parkingSpace\";\n\nclass App extends React.Component {\n  state = {\n    totalparkingSpace: 0,\n    parkingSpaceAvalilable: 0,\n    parkingSpaceAccupied: 0,\n\n    parkingSpace: {\n      plate: \"\",\n      entrance: \"\",\n      exit: \"\",\n      value: \"\",\n      timeSpent: \"\",\n    },\n    parkingSpaceList: [],\n\n    hourCost: 7,\n    overTime: 15,\n    overtimeCost: 0.5,\n  };\n\n  //create a new parking space\n  createParkingSpace = () => {\n    const newParkingSpace = { ...this.state.parkingSpace };\n    const newParkingSpaceList = [\n      ...this.state.parkingSpaceList,\n      newParkingSpace,\n    ];\n    this.setState({\n      parkingSpaceList: newParkingSpaceList,\n    });\n\n    this.updateCounters(1, 1, null);\n  };\n\n  //delete all parking space on screen\n  deleteAllParkingSpace = () => {\n    this.setState({\n      parkingSpaceList: [],\n      totalparkingSpace: 0,\n      parkingSpaceAvalilable: 0,\n      parkingSpaceAccupied: 0,\n    });\n  };\n\n  //start timing\n  startTime = (position) => {\n    const newParkingSpaceList = [...this.state.parkingSpaceList];\n\n    if (!newParkingSpaceList[position].exit) {\n      if (!newParkingSpaceList[position].entrance) {\n        this.updateCounters(null, -1, 1);\n      }\n      newParkingSpaceList[position].entrance = new Date();\n      this.setState({\n        parkingSpaceList: newParkingSpaceList,\n      });\n    }\n  };\n\n  //finish and calculate cost\n  finishTime = (position) => {\n    const newParkingSpaceList = [...this.state.parkingSpaceList];\n\n    if (newParkingSpaceList[position].entrance) {\n      const dateStart = new Date(newParkingSpaceList[position].entrance);\n      const dateFinish = new Date();\n\n      const milliseconds = Math.abs(dateFinish - dateStart);\n      const hours = Math.floor(milliseconds / 3600000);\n      const minutes = Math.floor(milliseconds / 60000);\n      const seconds = ((milliseconds % 60000) / 1000).toFixed(0);\n\n      newParkingSpaceList[position].exit = dateFinish;\n      newParkingSpaceList[position].value =\n        this.state.hourCost * (hours > 0 ? hours : 1) +\n        (hours >= 1 ? this.state.overtimeCost * minutes : 0);\n      newParkingSpaceList[position].timeSpent =\n        hours + \"h:\" + minutes + \"m:\" + seconds + \"s\";\n\n      this.setState({ parkingSpaceList: newParkingSpaceList });\n    }\n  };\n\n  //delete specific parking space\n  deleteParkingSpace = (position) => {\n    //update counters according to parking space status\n    this.state.parkingSpaceList[position].exit\n      ? this.updateCounters(-1, 0, -1)\n      : this.state.parkingSpaceList[position].entrance\n      ? this.updateCounters(-1, 0, -1)\n      : this.updateCounters(-1, -1, 0);\n\n    const newParkingSpaceList = this.state.parkingSpaceList.filter(\n      (item, index) => index !== position\n    );\n\n    this.setState({ parkingSpaceList: newParkingSpaceList });\n  };\n\n  //clean data of parking space\n  resetTime = (position) => {\n    const newParkingSpaceList = [...this.state.parkingSpaceList];\n    if (newParkingSpaceList[position].entrance) {\n      const parkingSpace = { ...this.state.parkingSpace };\n      newParkingSpaceList[position] = parkingSpace;\n      this.setState({\n        parkingSpaceList: newParkingSpaceList,\n      });\n\n      this.updateCounters(null, 1, -1);\n    }\n  };\n\n  //controls the counters based on the parking space status\n  updateCounters = (total, available, occupied) => {\n    if (total) {\n      this.setState({\n        totalparkingSpace: this.state.totalparkingSpace + total,\n      });\n    }\n    if (available) {\n      this.setState({\n        parkingSpaceAvalilable: this.state.parkingSpaceAvalilable + available,\n      });\n    }\n    if (occupied) {\n      this.setState({\n        parkingSpaceAccupied: this.state.parkingSpaceAccupied + occupied,\n      });\n    }\n  };\n\n  //update hour cost\n  updateHourCost = (newCost) => {\n    this.setState({ hourCost: newCost });\n  };\n\n  //update over time\n  updateOverTime = (newOverTimet) => {\n    console.log(newOverTimet);\n    this.setState({ overTime: newOverTimet });\n  };\n\n  //update over time cost\n  updateOverTimeCost = (newOverTimeCost) => {\n    console.log(newOverTimeCost);\n    this.setState({ hourCovertimeCostost: newOverTimeCost });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"top\">\n          <div className=\"pricecontrol\">\n            <label>\n              Valor Hora:\n              <input\n                id=\"costhour\"\n                type=\"text\"\n                placeholder=\"0.00\"\n                defaultValue={this.state.hourCost}\n                onChange={(e) => this.updateHourCost(e.target.value)}\n              />\n            </label>\n            <label>\n              Tempo Excedente:\n              <input\n                id=\"overtime\"\n                type=\"text\"\n                placeholder=\"0\"\n                defaultValue={this.state.overTime}\n                onChange={(e) => this.updateOverTime(e.target.value)}\n              />\n            </label>\n            <label>\n              Custo Excedente:\n              <input\n                id=\"costovertime\"\n                type=\"text\"\n                placeholder=\"0.00\"\n                defaultValue={this.state.overtimeCost}\n                onChange={(e) => this.updateOverTimeCost(e.target.value)}\n              />\n            </label>\n          </div>\n\n          <div className=\"topcontent\">\n            <h1>Parking Lot App</h1>\n            <div className=\"display\">\n              <span>\n                Total: <strong>{this.state.totalparkingSpace}</strong>{\" \"}\n              </span>\n              <span>\n                Dispon√≠vel:<strong> {this.state.parkingSpaceAvalilable}</strong>\n              </span>\n              <span>\n                Ocupadas:<strong> {this.state.parkingSpaceAccupied}</strong>\n              </span>\n              <div className=\"buttonscontrol\">\n                <button onClick={() => this.createParkingSpace()}>Criar</button>\n                <button\n                  className=\"deleteall\"\n                  onClick={() => this.deleteAllParkingSpace()}\n                >\n                  Deletar Todas\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"container\">\n          {this.state.parkingSpaceList.map((item, index) => (\n            <ParkingSpace\n              key={index}\n              id={index}\n              onStartTime={this.startTime}\n              onFinishTime={this.finishTime}\n              onResetTime={this.resetTime}\n              onDelete={this.deleteParkingSpace}\n              parkingSpace={item}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}