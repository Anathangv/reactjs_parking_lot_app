{"version":3,"sources":["components/parkingSpace.js","App.js","serviceWorker.js","index.js"],"names":["ParkingSpace","Fragment","className","this","props","parkingSpace","entrance","exit","id","type","placeholder","onChange","e","onUpdatePlate","target","value","typt","readOnly","toLocaleString","timeSpent","Number","toFixed","onClick","onStartTime","onFinishTime","onResetTime","onDelete","Component","toast","configure","App","state","totalparkingSpace","parkingSpaceAvalilable","parkingSpaceAccupied","plate","parkingSpaceList","hourCost","overTime","overtimeCost","notify","text","warn","position","POSITION","TOP_RIGHT","createParkingSpace","newParkingSpace","newParkingSpaceList","setState","updateCounters","deleteAllParkingSpace","startTime","Date","finishTime","dateStart","dateFinish","milliseconds","Math","abs","hours","floor","minutes","seconds","trunc","deleteParkingSpace","filter","item","index","resetTime","total","available","occupied","updateCarPlate","newPlate","updateHourCost","newCost","updateOverTime","newOverTimet","updateOverTimeCost","newOverTimeCost","hourCovertimeCostost","defaultValue","map","key","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f1a6cb31.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./parkingSpace.css\";\r\n\r\nclass ParkingSpace extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div\r\n          className={\r\n            this.props.parkingSpace.entrance\r\n              ? this.props.parkingSpace.exit\r\n                ? \"parkingspace finalizing\"\r\n                : \"parkingspace occupied\"\r\n              : \"parkingspace\"\r\n          }\r\n        >\r\n          <div className=\"topcontainer\">\r\n            <div className=\"parkingPosition\">\r\n              <span>{this.props.id + 1} </span>\r\n            </div>\r\n            <div className=\"inputbox\">\r\n              <div className=\"line\">\r\n                <label>\r\n                  <span>Placa</span>\r\n                  <input\r\n                    type=\"text\"\r\n                    placeholder=\"AAAA-9999\"\r\n                    onChange={(e) =>\r\n                      this.props.onUpdatePlate(this.props.id, e.target.value)\r\n                    }\r\n                  />\r\n                </label>\r\n              </div>\r\n              <div className=\"line\">\r\n                <label>\r\n                  <span>Entrada</span>\r\n                  <input\r\n                    className=\"inputreadonly\"\r\n                    typt=\"text\"\r\n                    readOnly\r\n                    value={this.props.parkingSpace.entrance.toLocaleString()}\r\n                  />\r\n                </label>\r\n              </div>\r\n              <div className=\"line\">\r\n                <label>\r\n                  <span>Sa√≠da</span>\r\n                  <input\r\n                    className=\"inputreadonly\"\r\n                    typt=\"text\"\r\n                    readOnly\r\n                    value={this.props.parkingSpace.exit.toLocaleString()}\r\n                  />\r\n                </label>\r\n              </div>\r\n              <div className=\"line\">\r\n                <label>\r\n                  <span>Tempo</span>\r\n                  <input\r\n                    className=\"inputreadonly\"\r\n                    typt=\"text\"\r\n                    readOnly\r\n                    value={this.props.parkingSpace.timeSpent}\r\n                  />\r\n                </label>\r\n              </div>\r\n              <div className=\"line\">\r\n                <label>\r\n                  <span>Valor</span>\r\n                  <input\r\n                    className=\"inputreadonly\"\r\n                    typt=\"text\"\r\n                    value={`R$ ${Number(this.props.parkingSpace.value).toFixed(\r\n                      2\r\n                    )}`}\r\n                    readOnly\r\n                  />\r\n                </label>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"bottoncontainer\">\r\n            <button onClick={() => this.props.onStartTime(this.props.id)}>\r\n              Iniciar\r\n            </button>\r\n            <button onClick={() => this.props.onFinishTime(this.props.id)}>\r\n              Finalizar\r\n            </button>\r\n            <button onClick={() => this.props.onResetTime(this.props.id)}>\r\n              Reiniciar\r\n            </button>\r\n            <button\r\n              className=\"deletebutton\"\r\n              onClick={() => this.props.onDelete(this.props.id)}\r\n            >\r\n              Deletar\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ParkingSpace;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport ParkingSpace from \"./components/parkingSpace\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\ntoast.configure();\nclass App extends React.Component {\n  state = {\n    totalparkingSpace: 0,\n    parkingSpaceAvalilable: 0,\n    parkingSpaceAccupied: 0,\n\n    parkingSpace: {\n      plate: null,\n      entrance: \"\",\n      exit: \"\",\n      value: \"\",\n      timeSpent: \"\",\n    },\n    parkingSpaceList: [],\n\n    hourCost: 7,\n    overTime: 15,\n    overtimeCost: 0.5,\n  };\n\n  notify = (text) => {\n    toast.warn(text, { position: toast.POSITION.TOP_RIGHT });\n  };\n\n  //create a new parking space\n  createParkingSpace = () => {\n    const newParkingSpace = { ...this.state.parkingSpace };\n    const newParkingSpaceList = [\n      ...this.state.parkingSpaceList,\n      newParkingSpace,\n    ];\n    this.setState({\n      parkingSpaceList: newParkingSpaceList,\n    });\n\n    this.updateCounters(1, 1, null);\n  };\n\n  //delete all parking space on screen\n  deleteAllParkingSpace = () => {\n    this.setState({\n      parkingSpaceList: [],\n      totalparkingSpace: 0,\n      parkingSpaceAvalilable: 0,\n      parkingSpaceAccupied: 0,\n    });\n  };\n\n  //start timing\n  startTime = (position) => {\n    const newParkingSpaceList = [...this.state.parkingSpaceList];\n\n    //check is car palte was informed\n    if (!newParkingSpaceList[position].plate) {\n      this.notify(\"Necess√°rio informar a placa do ve√≠culo\");\n    } else {\n      if (!newParkingSpaceList[position].exit) {\n        if (!newParkingSpaceList[position].entrance) {\n          this.updateCounters(null, -1, 1);\n        }\n\n        newParkingSpaceList[position].entrance = new Date();\n        //newParkingSpaceList[position].entrance.setHours(12); //teste\n        //newParkingSpaceList[position].entrance.setMinutes(30); //teste\n        this.setState({\n          parkingSpaceList: newParkingSpaceList,\n        });\n      }\n    }\n  };\n\n  //finish and calculate cost\n  finishTime = (position) => {\n    const newParkingSpaceList = [...this.state.parkingSpaceList];\n\n    if (newParkingSpaceList[position].entrance) {\n      //check is car palte was informed\n      if (!newParkingSpaceList[position].plate) {\n        this.notify(\"Necess√°rio informar a placa do ve√≠culo\");\n      } else {\n        const dateStart = new Date(newParkingSpaceList[position].entrance);\n        const dateFinish = new Date();\n\n        const milliseconds = Math.abs(dateFinish - dateStart);\n        let hours = Math.floor(milliseconds / 3600000);\n        let minutes = Math.floor((milliseconds / 60000) % 60);\n        let seconds = (((milliseconds % 60000) / 1000) % 60).toFixed(0);\n\n        //adjust minutes and seconds to not display 60\n        if (seconds === 60) {\n          minutes = minutes + 1;\n          seconds = 0;\n        }\n        if (minutes === 60) {\n          hours = hours + 1;\n          minutes = 0;\n        }\n\n        //calculate hour cost\n        let value = this.state.hourCost * (hours > 0 ? hours : 1);\n\n        //increment overtime cost\n        value +=\n          hours >= 1\n            ? this.state.overtimeCost *\n              Math.trunc(minutes / this.state.overTime)\n            : 0;\n\n        newParkingSpaceList[position].exit = dateFinish;\n        newParkingSpaceList[position].value = value;\n        newParkingSpaceList[position].timeSpent =\n          hours + \"h:\" + minutes + \"m:\" + seconds + \"s\";\n\n        this.setState({ parkingSpaceList: newParkingSpaceList });\n      }\n    }\n  };\n\n  //delete specific parking space\n  deleteParkingSpace = (position) => {\n    //update counters according to parking space status\n    this.state.parkingSpaceList[position].exit\n      ? this.updateCounters(-1, 0, -1)\n      : this.state.parkingSpaceList[position].entrance\n      ? this.updateCounters(-1, 0, -1)\n      : this.updateCounters(-1, -1, 0);\n\n    const newParkingSpaceList = this.state.parkingSpaceList.filter(\n      (item, index) => index !== position\n    );\n\n    this.setState({ parkingSpaceList: newParkingSpaceList });\n  };\n\n  //clean data of parking space\n  resetTime = (position) => {\n    const newParkingSpaceList = [...this.state.parkingSpaceList];\n    if (newParkingSpaceList[position].entrance) {\n      const parkingSpace = { ...this.state.parkingSpace };\n      newParkingSpaceList[position] = parkingSpace;\n      this.setState({\n        parkingSpaceList: newParkingSpaceList,\n      });\n\n      this.updateCounters(null, 1, -1);\n    }\n  };\n\n  //controls the counters based on the parking space status\n  updateCounters = (total, available, occupied) => {\n    if (total) {\n      this.setState({\n        totalparkingSpace: this.state.totalparkingSpace + total,\n      });\n    }\n    if (available) {\n      this.setState({\n        parkingSpaceAvalilable: this.state.parkingSpaceAvalilable + available,\n      });\n    }\n    if (occupied) {\n      this.setState({\n        parkingSpaceAccupied: this.state.parkingSpaceAccupied + occupied,\n      });\n    }\n  };\n\n  //update car plate\n  updateCarPlate = (position, newPlate) => {\n    const newParkingSpaceList = [...this.state.parkingSpaceList];\n    newParkingSpaceList[position].plate = newPlate;\n    this.setState({ parkingSpaceList: newParkingSpaceList });\n  };\n\n  //update hour cost\n  updateHourCost = (newCost) => {\n    this.setState({ hourCost: newCost });\n  };\n\n  //update over time\n  updateOverTime = (newOverTimet) => {\n    this.setState({ overTime: newOverTimet });\n  };\n\n  //update over time cost\n  updateOverTimeCost = (newOverTimeCost) => {\n    this.setState({ hourCovertimeCostost: newOverTimeCost });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"top\">\n          <div className=\"pricecontrol\">\n            <label>\n              Valor Hora:\n              <input\n                id=\"costhour\"\n                type=\"text\"\n                placeholder=\"0.00\"\n                defaultValue={this.state.hourCost}\n                onChange={(e) => this.updateHourCost(e.target.value)}\n              />\n            </label>\n            <label>\n              Tempo Excedente:\n              <input\n                id=\"overtime\"\n                type=\"text\"\n                placeholder=\"0\"\n                defaultValue={this.state.overTime}\n                onChange={(e) => this.updateOverTime(e.target.value)}\n              />\n            </label>\n            <label>\n              Custo Excedente:\n              <input\n                id=\"costovertime\"\n                type=\"text\"\n                placeholder=\"0.00\"\n                defaultValue={this.state.overtimeCost}\n                onChange={(e) => this.updateOverTimeCost(e.target.value)}\n              />\n            </label>\n          </div>\n\n          <div className=\"topcontent\">\n            <h1>Parking Lot App</h1>\n            <div className=\"display\">\n              <span>\n                Total: <strong>{this.state.totalparkingSpace}</strong>{\" \"}\n              </span>\n              <span>\n                Dispon√≠vel:<strong> {this.state.parkingSpaceAvalilable}</strong>\n              </span>\n              <span>\n                Ocupadas:<strong> {this.state.parkingSpaceAccupied}</strong>\n              </span>\n              <div className=\"buttonscontrol\">\n                <button onClick={() => this.createParkingSpace()}>Criar</button>\n                <button\n                  className=\"deleteall\"\n                  onClick={() => this.deleteAllParkingSpace()}\n                >\n                  Deletar Todas\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"container\">\n          {this.state.parkingSpaceList.map((item, index) => (\n            <ParkingSpace\n              key={index}\n              id={index}\n              onStartTime={this.startTime}\n              onFinishTime={this.finishTime}\n              onResetTime={this.resetTime}\n              onDelete={this.deleteParkingSpace}\n              onUpdatePlate={this.updateCarPlate}\n              parkingSpace={item}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}